;!function(require, directRequire){;'use strict';const React=require('react'),_=require('lodash'),appserviceMessager=require('./a1dd553cc059d528bb0ef56afed53968.js'),webviewMessager=require('./a15851ca252a104aad8b3fd3fc114574.js'),idepluginMessager=require('./e9e3fd38aeedddd6db73d1d015ff6952.js'),consoleDisplay=require('./2dfc6a3df6d6fc51266b293c8420e88b.js'),messageCenter=require('./ff946754202ecf377034d29daac7c8d9.js'),C=require('./56c390e04c10e91a4aa2a2c19d9a885d.js'),locales=require('./common/locales/index.js'),projectManager=require('./3bfffbe88b3d923921f851c0697974fe.js'),getSubPackage=require('./71734cad2a6081d396ea668ffa405627.js'),tools=require('./d3976cc01aeebc5b09e11c4135b6bd8d.js'),{resetBackgroundStatus}=require('./a3959bb900db9f65ed2e9c5dfa6977b7.js'),SIMULATOR_TYPE=require('./efd8b4323f89b2a759d044d894e3a4f0.js'),store=require('./bc78839ccca8df9e5ceeb7fae11b7be2.js'),grabberWebviewManager=require('./87822abadd12d18b00ea00716f2410f6.js'),webviewPool=require('./a78e6d6a87de1708226375ca4c320d76.js'),{validType,tokenManager}=require('./dc244a5ba483ad6e0acd267d3b91b282.js'),{setWebSocketHeader}=require('./ffc9a3cdcc5036d1fb62a2324c72a2b0.js'),getMainPackage=require('./e92285f0dd3fc4dc1f7df18a8a32d39c.js'),TaskPromise=require('./32de5d16fa0407815a081d7c2ff94d8b.js'),performanceUtils=require('./344232cd2199c9c3a024b4005d054672.js'),hookMethodsCache=require('./c44dddb4ccd769f104fce4a777049908.js'),{buildResizeEvent}=require('./a3d662b5798bbb27bf21be3e3587a588.js'),APPSERVICE_DEATH_DETECTTIME=6e4,CONSTANTS=C.SIMULATOR_PLUGIN_HOOK_METHODS.APPSERVICE;function randomNumber(a,b){return Math.floor(Math.random()*(b-a+1))+a}class AppService extends React.Component{constructor(a){super(a),this.alreadyDeath=!1,this.checkOnAfterInvokeAndReturn=(a,b,c)=>{const d=(b)=>{b&&(this.syncDialogMap[a]?(this.syncDialogMap[a].ok(JSON.stringify(b)),delete this.syncDialogMap[a]):appserviceMessager.invokeCallback(a,b))};hookMethodsCache.has({command:CONSTANTS.onAfterInvoke,api:b})?this.simulatorPluginMessager.simulatorHookMethodCallback(CONSTANTS.onAfterInvoke,hookMethodsCache.get({command:CONSTANTS.onAfterInvoke,api:b}),c||{}).then((a)=>{d(a)}):d(c)},this.syncDialogMap={},this.restartTimer=null,this.subPackageLoading={},this.mainPackageLoading=!1,this.taskMap=new TaskPromise}componentDidMount(){this._onAppServiceMessage=this.onAppServiceMessage.bind(this),appserviceMessager.register(this._onAppServiceMessage),this.props.project&&(this.simulatorType=this.props.project.simulatorType,this.props.project.simulatorType!==SIMULATOR_TYPE.wechat&&(this.simulatorPluginMessager=idepluginMessager.get(this.props.project.simulatorType),appserviceMessager.simulatorPluginMessager=this.simulatorPluginMessager)),this.initWebview()}componentWillUnmount(){this.webview&&(this.webview.detach(),global.online&&grabberWebviewManager.manager.removeWebview('appservice')),clearInterval(this.deathDetectTimer),appserviceMessager.unRegister(this._onAppServiceMessage)}componentWillReceiveProps(a){if(a.assdkCallbackInfo!==this.props.assdkCallbackInfo){const{callbackID:b,res:c,api:d}=a.assdkCallbackInfo;this.checkOnAfterInvokeAndReturn(b,d,c)}(a.compileCommand!==this.props.compileCommand||a.device!==this.props.device)&&(appserviceMessager.ready=!1,this.alreadyDeath?this.initWebview():this.restart()),a.appLaunched!==this.props.appLaunched&&a.appLaunched&&this.taskMap.onTaskDone('appLaunched'),a.subPackageLoaded!==this.props.subPackageLoaded&&setTimeout(()=>{this.checkSubPackages()}),this.onAppRouteChange(a),this.onNetworkTypeChange(a),this.onShowDevtoolsReload(a),this.updateIdepluginMessager(a)}onAppRouteChange(a){a.appRoute!==this.props.appRoute&&('ready'===a.appRoute.status?'appLaunch'===a.appRoute.openType?this.triggerLaunch(a):this.triggerAppRoute(a):'done'===a.appRoute.status&&this.triggerAppRouteDone(a))}onNetworkTypeChange(a){a.networkType!==this.props.networkType&&(appserviceMessager.triggerOnEvent({eventName:'onNetworkStatusChange',data:{isConnected:'none'!==a.networkType,networkType:a.networkType}}),this.webview&&this.webview.executeScript({code:`var event = new CustomEvent("networkChange", {
            detail: {
              networkStatus: '${a.networkType}'
            }
          })
          window.dispatchEvent(event)`}))}formatWebviewQuery(a){const b={};for(const c in a.query)b[c]=encodeURIComponent(a.query[c]);return b}triggerLaunch(a){const b=a.currentWebview,{id:c,pathName:d,query:e}=b;this.checkPackageLoadTask(d,()=>{appserviceMessager.triggerOnEvent({eventName:'onAppRoute',webviewID:c,data:{webviewId:c,path:d+'.html',query:e,openType:'appLaunch',scene:a.scene}}),this.checkSimulateUpdate()})}triggerAppRoute(a){const b=a.currentWebview,{id:c,pathName:d}=b;this.checkPackageLoadTask(d,()=>{const e=a.rotatedBeforeRoute&&!a.rotated,f=e?{resizing:!0}:{};appserviceMessager.triggerOnEvent({eventName:'onAppRoute',webviewID:c,data:Object.assign({webviewId:c,path:d+'.html',query:this.formatWebviewQuery(b),openType:a.appRoute.openType},f)}),this.checkRotate(a)})}triggerAppRouteDone(a){const b=a.currentWebview,{id:c,pathName:d}=b;this.checkPackageLoadTask(d,()=>{appserviceMessager.triggerOnEvent({eventName:'onAppRouteDone',webviewID:c,data:{webviewId:c,path:d+'.html',query:this.formatWebviewQuery(b),openType:a.appRoute.openType}})})}async checkRotate(a){const b=a.rotatedBeforeRoute&&!a.rotated;if(b){const b=a.rotated?'landscape':'portrait',c=await buildResizeEvent({eventName:'onAppRouteResized',deviceOrientation:b})(store.getState);appserviceMessager.triggerOnEvent(c),webviewMessager.triggerOnEvent(c)}}checkSimulateUpdate(){const a=this.props.simulateUpdate;a?(this.props.simulatorActions.setSimulateUpdate(!1),setTimeout(()=>{appserviceMessager.triggerOnEvent({eventName:'onUpdateStatusChange',data:{state:'updating'}}),setTimeout(()=>{appserviceMessager.triggerOnEvent({eventName:'onUpdateStatusChange',data:{state:'updateReady'}})},randomNumber(1e3,5e3))},randomNumber(1e3,5e3))):setTimeout(()=>{appserviceMessager.triggerOnEvent({eventName:'onUpdateStatusChange',data:{state:'noUpdate'}})},randomNumber(1e3,5e3))}checkPackageLoadTask(a,b){const c=tools.checkIsInSubPackage(this.props.appConfig,a);c?this.taskMap.checkTaskPromise(c.root,b):this.taskMap.checkTaskPromise(C.MINI_PROGRAM_MAIN_PACKAGE_ROOT,b)}initWebview(){this.alreadyDeath=!1;const a=webviewPool.get('appservice',{id:'appservice'});this.webview&&(this.webview.detach(),global.online),global.online&&(this.webview&&grabberWebviewManager.manager.removeWebview('appservice'),grabberWebviewManager.manager.addWebview('appservice',a._webview,{isAppservice:!0})),this.webview=a;const b=tokenManager.getSessionToken(validType.UA_TOKEN);a.setUserAgentOverride(`wechatdevtools appservice port/${global.messageCenterPort} token/${b} ${this.props.popup?'popup':''}`),a.setAttribute('tabIndex','-1'),this.initWebviewEvent(a),a.attach(this.appservicecontainer),setTimeout(()=>{this.showDevTools()},300)}initWebviewEvent(a){a.on('exit',(a)=>{('abnormal'===a.reason||'crash'===a.reason||'killed'===a.reason)&&this.initWebview()}),a.on('dialog',(a)=>{const{messageType:b='',messageText:c=''}=a;if('prompt'===b)if(a.preventDefault(),/^____sdk____/.test(c)){const b=JSON.parse(c.replace(/^____sdk____/,'')),d=b.command;if('APPSERVICE_INVOKE'===d){const{callbackID:c,api:d}=b.data;this.syncDialogMap[c]=a.dialog,hookMethodsCache.has({command:CONSTANTS.onBeforeInvoke,api:d})?this.simulatorPluginMessager.simulatorHookMethodCallback(CONSTANTS.onBeforeInvoke,hookMethodsCache.get({command:CONSTANTS.onBeforeInvoke,api:d}),b.data.args).then((a)=>{if(a.preventDefault)return void this.checkOnAfterInvokeAndReturn(c,d,a.result||{});const e=a.args,f=_.cloneDeep(b);f.data.args=e,this.props.assdkActions.exec(f.data).then((a)=>{a&&this.checkOnAfterInvokeAndReturn(c,d,a)})}):this.props.assdkActions.exec(b.data).then((a)=>{a&&this.checkOnAfterInvokeAndReturn(c,d,a)})}}else{if(c===C.GET_MESSAGE_TOKEN)return void a.dialog.ok(messageCenter.getToken('APPSERVICE'));a.dialog.ok('')}if('alert'===b){if(a.preventDefault(),a.dialog.ok(),'DOCUMENT_READY'===c&&(appserviceMessager.ready=!0,this.props.simulatorActions.setAppLaunched(!0),performanceUtils.markFirstCompileComplete()),0===c.indexOf('SUBPACKAGE_READY_')){const a=c.replace(/^SUBPACKAGE_READY_/,'');this.props.subPackageLoaded[a]&&this.props.subPackageLoaded[a].taskId&&appserviceMessager.triggerOnEvent({eventName:'onLoadSubPackageTaskStateChange',data:{moduleName:a,state:'success',taskId:this.props.subPackageLoaded[a].taskId}}),this.props.simulatorActions.setSubPackage(a,!0)}if(0===c.indexOf('SET_SOCKET_HEADER:'))try{const a=JSON.parse(c.replace('SET_SOCKET_HEADER:',''));setWebSocketHeader(a)}catch(a){}}}),a.onBeforeRequest=(a)=>{return /^https?:\/\//i.test(a.url)?void 0:{cancel:!0}},a.onRequestBeforeSendHeaders=(a)=>{const b=this.props.project;if(b){const b=a.url;if('main_frame'===a.type&&b.match(/\?load$/))return this.restart(),{cancel:!0};if(0!==b.indexOf(`http://127.0.0.1:${global.proxyPort}/appservice`)&&0!==b.indexOf(`http://127.0.0.1:${global.proxyPort}/calibration/`)&&!/favicon\.ico$/.test(b)&&'none'===this.props.networkType)return consoleDisplay.display({command:C.DISPLAY_ERROR,data:{title:locales.config.NO_NETWORK_TIPS_TITLE,error:{message:locales.config.NO_NETWORK_TIPS_CONTENT.format(b)}}}),{cancel:!0};const c=a.requestHeaders||[],d=c.findIndex((a)=>{return'cookie'===a.name.toLowerCase()});c.splice(d,1);for(const a of c){if('_Cookie'===a.name&&(a.name='Cookie'),'Referer'===a.name){const b=projectManager.getProjectAppID();a.value=`https://servicewechat.com/${b}/devtools/page-frame.html`}if('User-Agent'===a.name&&(a.value=this.props.ua.replace('{{webviewID}}',''),0===b.indexOf(`http://127.0.0.1:${global.proxyPort}`))){const b=tokenManager.getSessionToken(validType.UA_TOKEN);a.value+=' token/'+b}}return{requestHeaders:a.requestHeaders}}},a.onRequestHeadersReceived=(a)=>{const{type:b}=a;if('xmlhttprequest'===b){const b=a.responseHeaders||[],c={};return b.forEach((a)=>{const{name:b,value:d}=a;c[b]||(c[b]=[]),c[b].push(d)}),b.push({name:'for-weapp-devtools',value:JSON.stringify(c)}),{responseHeaders:b}}return{}}}showDevTools(){this.resetStatus(),this.props.devtoolsActions.setWebview(this.webview)}resetStatus(){this.taskMap.clear(),this.subPackageLoading={},this.mainPackageLoading=!1,this.syncDialogMap={},consoleDisplay.cleanQueue(),consoleDisplay.ready=!1,resetBackgroundStatus()}restart(){clearTimeout(this.restartTimer),this.restartTimer=setTimeout(()=>{if(!this.webview||!this.props.appConfig)return;this.resetStatus();const a=()=>{this.webview.off('loadcommit',a),clearTimeout(this.restartLoadCommitTimer),appserviceMessager.ready=!0,consoleDisplay.ready=!0,this.deathDetect()};this.props.simulatorActions.launch(),this.props.devtoolsActions.restart(),this.webview.on('loadcommit',a),this.webview.src=`http://127.0.0.1:${global.proxyPort}/appservice/appservice?t=${Date.now()}`,this.restartLoadCommitTimer=setTimeout(()=>{this.props.infoActions.showError(locales.config.MINI_PROGRAM_CONSUME_TIMING),this.alreadyDeath=!0},APPSERVICE_DEATH_DETECTTIME)},100)}onAppServiceMessage(a){const{command:b,data:c}=a;'APPSERVICE_PUBLISH'===b&&appserviceMessager.publish(a),'APPSERVICE_INVOKE'===b&&setTimeout(()=>{hookMethodsCache.has({command:CONSTANTS.onBeforeInvoke,api:c.api})?this.simulatorPluginMessager.simulatorHookMethodCallback(CONSTANTS.onBeforeInvoke,hookMethodsCache.get({command:CONSTANTS.onBeforeInvoke,api:c.api}),c.args).then((a)=>{if(a.preventDefault)return void this.checkOnAfterInvokeAndReturn(c.callbackID,c.api,a.result||{});const b=a.args||void 0,d=_.cloneDeep(c);b&&(d.args=b),this.props.assdkActions.exec(d).then((a)=>{a&&this.checkOnAfterInvokeAndReturn(c.callbackID,c.api,a)})}):this.props.assdkActions.exec(c).then((a)=>{a&&this.checkOnAfterInvokeAndReturn(c.callbackID,c.api,a)})})}updateIdepluginMessager(a){const b=a.project.simulatorType;this.simulatorType!==b&&(this.simulatorType=b,b!==SIMULATOR_TYPE.wechat&&(this.simulatorPluginMessager=idepluginMessager.get(b),appserviceMessager.simulatorPluginMessager=this.simulatorPluginMessager))}async loadMainPackage(){return this.subPackageLoading[C.MINI_PROGRAM_MAIN_PACKAGE_ROOT]?new Promise((a)=>{this.taskMap.checkTaskPromise(C.MINI_PROGRAM_MAIN_PACKAGE_ROOT,a)}):(this.subPackageLoading[C.MINI_PROGRAM_MAIN_PACKAGE_ROOT]=!0,void this.webview.executeScript({code:await getMainPackage(this.props.project)}))}checkSubPackages(){for(const a in this.props.subPackageLoaded){if(this.props.subPackageLoaded[a].loaded){this.taskMap.onTaskDone(a);continue}this.taskMap.checkTaskPromise('appLaunched',async()=>{if(a===C.MINI_PROGRAM_MAIN_PACKAGE_ROOT)return void(await this.loadMainPackage());const b=tools.checkIsIndependentSubpackage(this.props.appConfig,a);b||this.props.subPackageLoaded[C.MINI_PROGRAM_MAIN_PACKAGE_ROOT]&&this.props.subPackageLoaded[C.MINI_PROGRAM_MAIN_PACKAGE_ROOT].loaded||(await this.loadMainPackage()),this.subPackageLoading[a]||(this.subPackageLoading[a]=!0,this.webview.executeScript({code:await getSubPackage(this.props.project,a)}))})}}onShowDevtoolsReload(a){a.devtoolsReload!==this.props.devtoolsReload&&this.restart()}deathDetect(){let a=0;clearInterval(this.deathDetectTimer),this.deathDetectTimer=setInterval(()=>{this.props.debuggerPaused||(a++,this.webview.executeScript({code:'1 + 1'},()=>{a=0}),60<=a&&(clearInterval(this.deathDetectTimer),this.props.infoActions.showError(locales.config.MINI_PROGRAM_NO_RESPONSE_FOR_A_LONG_TIME),this.alreadyDeath=!0))},1e3)}render(){return React.createElement('div',{ref:(a)=>this.appservicecontainer=a,style:{width:0,height:0},tabIndex:-1})}}module.exports=AppService;
;}(require("lazyload"), require);
