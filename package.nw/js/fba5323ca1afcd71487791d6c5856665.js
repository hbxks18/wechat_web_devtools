;!function(require, directRequire){;"use strict";const path=require("path"),fs=require("fs"),locales=require('./common/locales/index.js');var ReservedDirectoryLevel;(function(a){a[a.All=0]="All",a[a.Root=1]="Root"})(ReservedDirectoryLevel||(ReservedDirectoryLevel={}));const RESERVED_DIRECTORIES=[{name:"__wx__",level:ReservedDirectoryLevel.Root},{name:"__plugin__",level:ReservedDirectoryLevel.All},{name:"__devplugin__",level:ReservedDirectoryLevel.Root},{name:"__dev__",level:ReservedDirectoryLevel.Root},{name:"__asdebug__",level:ReservedDirectoryLevel.Root}],getReservedDirectoryPattern=({name:a,level:b},{miniprogramRoot:c=""})=>{return path.join(c,b===ReservedDirectoryLevel.All?"**":"",a,"**","*")},getReservedDirectoryPatterns=(a="")=>RESERVED_DIRECTORIES.map((b)=>{return getReservedDirectoryPattern(b,{miniprogramRoot:a})}),isDirectory=(a)=>{return fs.lstatSync(a).isDirectory()},findDirectory=(a,b,c=!0)=>{if(!isDirectory(a))return null;const d=fs.readdirSync(a).map((b)=>{return path.join(a,b)}).filter(isDirectory);for(const e of d){if(e.endsWith(b))return e;if(c){const a=findDirectory(e,b,c);if(a)return a}}return null};function checkReservedDirectories(a){RESERVED_DIRECTORIES.forEach(({name:b,level:c})=>{const d=path.join(a.projectpath,a.miniprogramRoot||""),e=findDirectory(d,b,c===ReservedDirectoryLevel.All);if(e){const c=path.relative(a.projectpath,e),d=locales.config.IGNORE_RESERVED_DIRECTORY.format([b,c]);throw d}})}module.exports={RESERVED_DIRECTORIES,getReservedDirectoryPatterns,checkReservedDirectories};
;}(require("lazyload"), require);
